pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Manohar-1305/bookmyshow.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' 
                    $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=BMS \
                    -Dsonar.projectKey=BMS
                    '''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
 stage('Install Dependencies') {
    steps {
        sh '''
        set -e  # Exit immediately if any command fails
        cd bookmyshow-app

        echo "Checking for package.json..."
        if [ ! -f package.json ]; then
            echo "Error: package.json not found in bookmyshow-app!"
            exit 1
        fi

        echo "Removing old dependencies..."
        rm -rf node_modules package-lock.json

        echo "Installing dependencies..."
        if [ -f package-lock.json ]; then
            npm ci  # Faster and ensures a clean install based on lock file
        else
            npm install  # Falls back to regular install if no lock file is found
        fi

        echo "Dependency installation completed successfully!"
        '''
    }
}

        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh '''
                echo "Running Trivy FS scan..."
                trivy fs --format table --severity HIGH,CRITICAL . > trivyfs.txt
                '''
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh ''' 
                        echo "Cleaning up old Docker images..."
                        docker image prune -f

                        echo "Building Docker image..."
                        docker build --no-cache -t manoharshetty507/bms:latest -f bookmyshow-app/Dockerfile bookmyshow-app

                        echo "Pushing Docker image to registry..."
                        docker push kastrov/bms:latest
                        '''
                    }
                }
            }
        }
        stage('Deploy to Container') {
            steps {
                sh ''' 
                echo "Stopping and removing old container..."
                docker stop bms || true
                docker rm bms || true

                echo "Running new container on port 3000..."
                docker run -d --restart=always --name bms -p 3000:3000 manoharshetty507/bms:latest

                echo "Fetching logs..."
                sleep 5  # Allow some time for the app to start
                docker logs bms
                '''
            }
        }
    }
    post {
        always {
            emailext attachLog: true,
                subject: "Build '${currentBuild.result}' for ${env.JOB_NAME}",
                body: """
                    <p><b>Project:</b> ${env.JOB_NAME}</p>
                    <p><b>Build Number:</b> ${env.BUILD_NUMBER}</p>
                    <p><b>Build URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                """,
                to: 'tradingcontendrive@gmail.com',
                attachmentsPattern: 'trivyfs.txt'
        }
    }
}
